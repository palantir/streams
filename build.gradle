/*
 * Copyright 2015 Palantir Technologies, Inc. All rights reserved.
 */

buildscript {
    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
        gradlePluginPortal() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    dependencies {
        classpath 'com.palantir.jakartapackagealignment:jakarta-package-alignment:0.5.0'
        classpath 'com.palantir.gradle.jdks:gradle-jdks:0.31.0'
        classpath 'com.palantir.gradle.jdkslatest:gradle-jdks-latest:0.7.0'
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.12.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.28.0'
        classpath 'com.palantir.gradle.revapi:gradle-revapi:1.7.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:2.12.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:5.0.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:2.0.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.7.0'
    }
}

apply plugin: 'com.palantir.external-publish'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.git-version'
apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.baseline-java-versions'
apply plugin: 'com.palantir.jdks.latest'

javaVersions {
    libraryTarget = 11
    runtime = 17
}

allprojects {
    apply plugin: 'com.palantir.java-format'
    apply plugin: 'com.palantir.jakarta-package-alignment'
    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    group 'com.palantir.common'
    version System.env.CIRCLE_TAG ?: gitVersion()

    tasks.withType(Test).configureEach {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
        // see https://docs.gradle.org/current/userguide/performance.html#execute_tests_in_parallel
        // and https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution
        // N.B. some tests depend on system properties, so cannot be concurrently executed
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        systemProperty("junit.jupiter.execution.parallel.enabled", "true")
        systemProperty("junit.jupiter.execution.parallel.mode.default", "same_thread")
        systemProperty("junit.jupiter.execution.parallel.mode.classes.default", "concurrent")
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.palantir.java-format'

    tasks.check.dependsOn(javadoc)
    tasks.check.dependsOn(checkImplicitDependencies)
    tasks.check.dependsOn(checkUnusedDependencies)
    tasks.check.dependsOn(checkUnusedConstraints)
}
